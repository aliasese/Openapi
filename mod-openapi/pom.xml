<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.cnebula.lsp</groupId>
    <artifactId>mod-openapi</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <!--FOLIO Nexus私服仓储-->
    <repositories>
        <repository>
            <id>folio-nexus</id>
            <name>FOLIO Maven repository</name>
            <url>https://repository.folio.org/repository/maven-folio</url>
        </repository>
    </repositories>

    <!--RMB 环境必要依赖-->
    <dependencies>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web-client</artifactId>
            <version>3.4.2</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.folio</groupId>
            <artifactId>postgres-runner</artifactId>
            <version>${raml-module-builder.version}</version>
            <scope>test</scope>
        </dependency>
        <!--RMB 运行时依赖-->
        <dependency>
            <groupId>org.folio</groupId>
            <artifactId>domain-models-runtime</artifactId>
            <version>${raml-module-builder.version}</version>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.9.9</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
            <version>3.4.2</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-unit</artifactId>
            <version>3.3.3</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <!--Maven编译插件-->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <!--JDK版本-->
                    <source>1.8</source>
                    <target>1.8</target>
                    <!--打包时的编码规则-->
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <!--MAVEN执行插件-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.5.0</version>
                <executions>
                    <!--RMB 根据接口定义RAML生成Interface-->
                    <execution>
                        <id>generate_interfaces</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>org.folio.rest.tools.GenerateRunner</mainClass>
                            <!-- <executable>java</executable> -->
                            <cleanupDaemonThreads>false</cleanupDaemonThreads>
                            <systemProperties>
                                <systemProperty>
                                    <key>project.basedir</key>
                                    <value>${basedir}</value>
                                </systemProperty>
                                <systemProperty>
                                    <key>raml_files</key>
                                    <value>${ramlfiles_path}</value>
                                </systemProperty>
                            </systemProperties>
                        </configuration>
                    </execution>
                    <execution>
                        <id>git submodule update</id>
                        <phase>initialize</phase>
                        <configuration>
                            <executable>git</executable>
                            <arguments>
                                <argument>submodule</argument>
                                <argument>update</argument>
                                <argument>--init</argument>
                                <argument>--recursive</argument>
                            </arguments>
                        </configuration>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>start-postgres</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>java</executable>
                            <async>true</async>
                            <classpathScope>test</classpathScope>
                            <arguments>
                                <argument>-classpath</argument>
                                <classpath/>
                                <argument>org.folio.rest.persist.PostgresRunner</argument>
                                <argument>${postgresrunner.port}</argument>
                                <argument>${postgres.port}</argument>
                                <argument>postgres</argument>  <!-- username -->
                                <argument>postgres</argument>  <!-- password -->
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>wait-for-postgres</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <classpathScope>test</classpathScope>
                            <mainClass>org.folio.rest.persist.PostgresWaiter</mainClass>
                            <arguments>
                                <argument>${postgresrunner.port}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-postgres</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <classpathScope>test</classpathScope>
                            <mainClass>org.folio.rest.persist.PostgresStopper</mainClass>
                            <arguments>
                                <argument>${postgresrunner.port}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--Maven 切面插件-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>1.10</version>
                <configuration>
                    <verbose>true</verbose>
                    <showWeaveInfo>false</showWeaveInfo>
                    <complianceLevel>1.8</complianceLevel>
                    <includes>
                        <include>**/impl/*.java</include>
                        <include>**/*.aj</include>
                    </includes>
                    <aspectDirectory>src/main/java/org/folio/rest/annotations</aspectDirectory>
                    <XaddSerialVersionUID>true</XaddSerialVersionUID>
                    <showWeaveInfo>true</showWeaveInfo>
                    <aspectLibraries>
                        <!--RMB API请求、响应等参数切面校验工具-->
                        <aspectLibrary>
                            <groupId>org.folio</groupId>
                            <artifactId>domain-models-api-aspects</artifactId>
                        </aspectLibrary>
                    </aspectLibraries>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjrt</artifactId>
                        <version>1.8.9</version>
                    </dependency>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <version>1.8.9</version>
                    </dependency>
                </dependencies>
            </plugin>
            <!--MAVEN资源拷贝插件-->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!--配置RMB环境打成jar时，将接口设计RAML拷贝到jar里面的指定目录，用于请求时展示接口html定义-->
                            <outputDirectory>${basedir}/target/classes/apidocs/raml</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${ramlfiles_path}</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-resources-2</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/classes/apidocs/raml-util</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${ramlfiles_util_path}</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-resources-3</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/src/main/resources</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${ramlfiles_path}</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>filter-descriptor-inputs</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/descriptors</directory>
                                    <include>*Descriptor-template.json</include>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--Maven重命名拷贝插件-->
            <plugin>
                <groupId>com.coderplus.maven.plugins</groupId>
                <artifactId>copy-rename-maven-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>rename-descriptor-outputs</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>rename</goal>
                        </goals>
                        <configuration>
                            <!--打包时，将Module接口描述文件拷贝到target目录-->
                            <fileSets>
                                <fileSet>
                                    <sourceFile>${project.build.directory}/ModuleDescriptor-template.json</sourceFile>
                                    <destinationFile>${project.build.directory}/ModuleDescriptor.json</destinationFile>
                                </fileSet>
                                <fileSet>
                                    <sourceFile>${project.build.directory}/DeploymentDescriptor-template.json
                                    </sourceFile>
                                    <destinationFile>${project.build.directory}/DeploymentDescriptor.json
                                    </destinationFile>
                                </fileSet>
                            </fileSets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Replace the baseUri and the protocols in the RAMLs that have been copied to
              apidocs directory so that they can be used via the local html api console. -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <configuration>
                            <target>
                                <replace token="baseUri: http://github.com/org/folio/mod-users"
                                         value="baseUri: http://localhost:{http.port}"
                                         dir="${basedir}/target/classes/apidocs/raml">
                                    <include name="**/*.raml"/>
                                </replace>
                                <replace token="protocols: [ HTTPS ]" value="protocols: [ HTTP ]"
                                         dir="${basedir}/target/classes/apidocs/raml">
                                    <include name="**/*.raml"/>
                                </replace>
                                <replace token="../.." value="../raml-util"
                                         dir="${basedir}/target/classes/apidocs/raml">
                                    <include name="**/*.raml"/>
                                </replace>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>set-system-properties</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <properties>
                        <property>
                            <name>log4j.configuration</name>
                            <value>${project.baseUri}src/main/resources/log4j.properties</value>
                        </property>
                    </properties>
                    <outputFile/>
                </configuration>
            </plugin>

            <!--为打包成的jar指定主服务和函数主入口，使其成为可执行jar-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.3</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>io.vertx.core.Launcher</Main-Class>
                                        <Main-Verticle>org.folio.rest.RestVerticle</Main-Verticle>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                            <artifactSet/>
                            <outputFile>${project.build.directory}/${project.artifactId}-fat.jar</outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--<plugin>-->
            <!--<groupId>org.apache.maven.plugins</groupId>-->
            <!--<artifactId>maven-failsafe-plugin</artifactId>-->
            <!--<version>2.19.1</version>-->
            <!--<executions>-->
            <!--<execution>-->
            <!--<id>integration-test</id>-->
            <!--<goals>-->
            <!--<goal>integration-test</goal>-->
            <!--</goals>-->
            <!--</execution>-->
            <!--<execution>-->
            <!--<id>verify</id>-->
            <!--<goals>-->
            <!--<goal>verify</goal>-->
            <!--</goals>-->
            <!--</execution>-->
            <!--</executions>-->
            <!--</plugin>-->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.3</version>
                <configuration>
                    <preparationGoals>clean verify</preparationGoals>
                    <tagNameFormat>v@{project.version}</tagNameFormat>
                    <pushChanges>false</pushChanges>
                    <localCheckout>true</localCheckout>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <!--设置项目部署到Nexus地址-->
    <distributionManagement>
        <repository>
            <id>release</id>
            <name>Nexus Release Repository</name>
            <url>
                http://222.29.77.155:8080/nexus/content/repositories/releases/
            </url>
        </repository>
        <snapshotRepository>
            <id>release</id>
            <name>Nexus Snapshot Repository</name>
            <url>
                http://222.29.77.155:8080/nexus/content/repositories/snapshots/
            </url>
        </snapshotRepository>
    </distributionManagement>
    <!--版本控制-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <!--让RMB在由RAML生成Interface时，为路由对应的方法添加Vert.x RoutingContext,用于获取Request、Response、Header等对象-->
        <!--/tasks为所有tasks顶级路由下-->
        <!--多个路由以英文逗号分隔-->
        <generate_routing_context>/openapi,/openapi/start/post,/openapi/stop/post,/openapidoc,/clientkey,/clientkey/client_secret,/clientkey/page_query,/clientkey/check_exist/client_name</generate_routing_context>
        <!--<generate_routing_context>/tasks</generate_routing_context>-->
        <raml-module-builder.version>14.0.0</raml-module-builder.version>
        <!--接口设计RAML文件存放位置-->
        <ramlfiles_path>${basedir}/ramls/</ramlfiles_path>
        <ramlfiles_util_path>${basedir}/raml-util</ramlfiles_util_path>
        <postgresrunner.port>5434</postgresrunner.port>
        <!-- Postgres port for Jenkins CI build environment https://issues.folio.org/browse/METADATA-10 -->
        <postgres.port>5432</postgres.port>
    </properties>

</project>